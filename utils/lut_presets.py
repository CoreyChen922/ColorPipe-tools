""" LUT preset
    A preset is a dict containing LUT parameters.
    The dict must have these attributes:
    {
    'type': <'default' or '1D' or '2D' or '3D'>,
    'extension': <str value>,
    'input_range': <[int/float, int/float]>,
    'output_range': <[int/float, int/float]>,
    'output_bitdepth': <int value>,
    'cube_size': <int value>,
    'title': <str value>,
    'comment': <str value>,
    'version': <str value>
    }
    See attribute constant below.

    When 1D or 2D type is chosen, preset must define output_bitdepth but
    shouldn't define cube_size.

    When 3D is chosen, preset must define cube_size but shouldn't define
    output_bitdepth.

    'default' is used to declare default sets, it must define both
    output_bitdepth and cube_size

.. moduleauthor:: `Marie FETIVEAU <github.com/mfe>`_

"""
__version__ = "0.1"
import collections


class PresetException(Exception):
    """Module custom exception

    """
    pass

# Attributes
TYPE = 'type'
TYPE_CHOICE = ['default', '1D', '2D', '3D']
EXT = 'extension'
VERSION = 'version'
TITLE = 'title'
COMMENT = 'comment'
IN_RANGE = 'input_range'
OUT_RANGE = 'output_range'

# 1D / 2D specific attribute
OUT_BITDEPTH = 'output_bitdepth'

# 3D specific attribute
CUBE_SIZE = 'cube_size'

BASIC_ATTRS = [TYPE, EXT, VERSION, TITLE, COMMENT, IN_RANGE, OUT_RANGE]

BITDEPTH_MAX_VALUE = 128
BITDEPTH_MIN_VALUE = 8
CUBE_SIZE_MAX_VALUE = 128
CUBE_SIZE_MIN_VALUE = 3

FLOAT_BOUNDARY = 100.0

RAISE_MODE = 'raise'
FILL_MODE = 'fill'

MISSING_ATTR_MESSAGE = "Preset must have '{0}' attribute"


def get_default_preset():
    """ Get a general default preset.
        Values were chosen considering common LUT use cases.

    """
    return {
                TYPE: "default",
                EXT: ".lut",
                IN_RANGE: [0.0, 1.0],
                OUT_RANGE: [0.0, 1.0],
                OUT_BITDEPTH: 12,
                CUBE_SIZE: 17,
                TITLE: "LUT",
                COMMENT: ("Generated by ColorPipe-tools"
                            ).format(__version__),
                VERSION: "1"
           }


def is_range(arange):
    """ Return True if range is a collection composed of 2 int or float

    """
    if not isinstance(arange, collections.Iterable):
        return False
    if len(arange) != 2:
        return False
    for value in arange:
        if not isinstance(value, (int, float)):
            return False
    return True


def is_3d_preset(preset):
    """ Check if preset is valid for 3D LUTs
        Should be used after a check or complete

    """
    if preset[TYPE] == 'default' or preset[TYPE] == '3D':
        return True
    return False


def is_1d_or_2d_preset(preset):
    """ Check if preset is valid for 1D / 2D LUTs
        Should be used after a check or complete

    """
    if (preset[TYPE] == 'default'
        or preset[TYPE] == '1D'
        or preset[TYPE] == '2D'):
        return True
    return False
